"""
Core files for handling kba dataset
"""

#!/usr/bin/env python

import collections
import json
import multiprocessing
import os
import subprocess
import sys
import thrift

from BeautifulSoup import BeautifulSoup, SoupStrainer
from cStringIO import StringIO
from multiprocessing import Pool
from thrift import Thrift
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol

# set the encoding so BeautifulSoup doesn't take a dump
# add the files generated by the thrift compiler
# sys.path.append('/home/spalakod/kba-tools/src/main/python/gen-py') # workhorse settings
# FIXME!: REMOVE THIS MAGIC STRING
sys.path.append('/Users/shriphani/Documents/kba-tools/src/main/python/gen-py')

from kba import ttypes


THREAD_POOL_SIZE = 4  # 10 threads ensures that Bhiksha won't kill the job
KBA_DEFAULT_OUTPUT_DIR = '/home/spalakod/workhorse3'
KBA_BLOGS_LIST_FILENAME_BASE = 'kba_blogs_list'
KBA_FORUMS_LIST_FILENAME_BASE = 'kba_forums_list'
KBA_OUTLINKS_LIST_FILENAME_BASE = 'kba_outlinks_list'

KBA_FILE_HANDLES = None

def init_file_handles(thread_pool_id):
	ThreadFileHandles = collections.namedtuple(
		'ThreadFileHandles',
		[
			'forums_file_handle',
			'blogs_file_handle',
			'outlinks_file_handle'
		],
		verbose = False
	)
	return ThreadFileHandles(
		forums_file_handle = open(
			os.path.join(
				KBA_DEFAULT_OUTPUT_DIR,
			 	KBA_FORUMS_LIST_FILENAME_BASE + '_' + str(thread_pool_id) + '.txt'
			 ), 
			'w'),
		blogs_file_handle = open(
			os.path.join(
				KBA_DEFAULT_OUTPUT_DIR,
				KBA_BLOGS_LIST_FILENAME_BASE + '_' + str(thread_pool_id) + '.txt'
			), 
			'w'),
		outlinks_file_handle = open(
			os.path.join(
				KBA_DEFAULT_OUTPUT_DIR
				KBA_OUTLINKS_LIST_FILENAME_BASE + '_' + str(thread_pool_id) + '.txt'
			), 
			'w')
	)

def handle_kba_stream_file(kba_stream_file):
	"""	Decrypt, open and grab info	"""
	global KBA_FILE_HANDLES

	my_proc_unique_id = id(multiprocessing.current_process())

	if KBA_FILE_HANDLES is None:
		KBA_FILE_HANDLES = init_file_handles(my_proc_unique_id)

	if kba_stream_file.find('.xz.gpg') < 0:
		return

	after_decrypt = kba_stream_file.replace('.gpg', '')

	thrifts_data, errors = fileops(kba_stream_file, after_decrypt)

	transport = StringIO(thrifts_data)
	transport.seek(0)
	protocol = TBinaryProtocol.TBinaryProtocol(
		TTransport.TBufferedTransport(transport)
	)

	while True:
		stream_item = ttypes.StreamItem()
		try:
			stream_item.read(protocol)

			if kba_stream_file.find('social') >= 0:
				handle_metadata(json.loads(stream_item.source_metadata))
			handle_body(stream_item.body)

			flush_streams()

		except EOFError:
			break

	os.system('rm ' + after_decrypt)

def fileops(kba_stream_file, after_decrypt):
	os.system('gpg -d ' + kba_stream_file + ' > ' + after_decrypt)
	
	compressed_data = open(after_decrypt).read()
	xz_child = subprocess.Popen(
		['xz', '--decompress'],
		stdin=subprocess.PIPE, 
		stdout=subprocess.PIPE,
		stderr=subprocess.PIPE
	)

	return xz_child.communicate(compressed_data)

def handle_metadata(metadata):
	if not metadata.has_key('home_link'):
		return

	if metadata['home_link'] is None:
		return

	if metadata['feed_class'] == 'Forum':
		KBA_FILE_HANDLES.forums_file_handle.write(metadata['home_link'] + '\n')

	elif metadata['feed_class'] == 'Blog':
		KBA_FILE_HANDLES.blogs_file_handle.write(metadata['home_link'] + '\n')

def handle_body(body):
	for link in BeautifulSoup(body.raw, parseOnlyThese=SoupStrainer('a')):
		if link.has_key('href') and not link['href'] is None:
			KBA_FILE_HANDLES.outlinks_file_handle.write(link['href'] + '\n')

def flush_streams():
	KBA_FILE_HANDLES.forums_file_handle.flush()
	KBA_FILE_HANDLES.blogs_file_handle.flush()
	KBA_FILE_HANDLES.outlinks_file_handle.flush()

if __name__ == '__main__':
	if len(sys.argv) < 2:
		print 'Usage: python kba_core.py <kba_corpus_directory>'
		sys.exit(1)

	KBA_CORPUS_DIRECTORY = sys.argv[1]

	reload(sys)
	sys.setdefaultencoding('utf-8')

	p = Pool(THREAD_POOL_SIZE)

	for root, dirs, files in os.walk(KBA_CORPUS_DIRECTORY):	
		if files == []:
			continue
		
		try:
			p.map(
				handle_kba_stream_file, 
				[os.path.join(root, f) for f in files]
			)
		except Exception, e:
			print e
			sys.stderr.write('something fucked up' + str(files) + '\n')
